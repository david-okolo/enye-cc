{"version":3,"sources":["serviceWorker.ts","Map/Marker/marker.tsx","Map/constants.ts","lib/utils/constants.ts","Map/map.tsx","SearchPanel/SearchBar/searchBar.tsx","SearchPanel/SearchResults/searchResults.tsx","SearchPanel/searchPanel.tsx","lib/utils/placesRequest.ts","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Marker","props","content","title","style","fontWeight","color","width","EnvironmentFilled","onClick","handleMarkerIconClick","text","lat","lng","fontSize","darkMapStyleOptions","DEFAULT_LAT_LNG","marks","1","10","20","30","40","PartialUserMapIcon","MapContainer","center","zoom","markerLocations","flex","bootstrapURLKeys","key","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","map","maps","styledMap","StyledMapType","mapTypes","set","setMapTypeId","initializeMap","Search","Input","SearchBar","enterButton","placeholder","prefix","EnvironmentOutlined","size","onChange","handleSearchInputChange","value","query","marginBottom","min","max","step","range","tipFormatter","handleSearchRadiusChange","searchRadius","SearchResults","currentPage","handlePageChange","hospitalsData","pageSize","pagination","current","dataSource","renderItem","item","Item","actions","name","formatted_address","geometry","Meta","description","getDistance","toFixed","Text","Typography","SearchPanel","cropped","dataIsLoading","searchBarProps","customSearchText","justify","strong","loading","active","fetchHospitals","a","radius","radiusInMetres","fetch","method","headers","body","JSON","stringify","latlng","response","json","parsedData","Title","useBreakpoint","Grid","App","useState","allHospitalsData","setAllHospitalsData","setSearchRadius","setQuery","setHospitalsData","setDataIsLoading","setCenter","setCurrentPage","mapMarkers","setMapMarkers","mapZoom","setMapZoom","drawerIsOpen","setDrawerIsOpen","xl","useEffect","then","queryFiltered","filtered","data","filter","sort","itemA","itemB","filteredHospitalData","markers","id","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","RegExp","genRegex","e","target","page","pageSIze","columnSpan","display","flexFlow","height","alignItems","span","padding","backgroundColor","level","Array","isArray","realValue","overflow","placement","onClose","visible","mask","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bd64fb54.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { FunctionComponent } from 'react';\nimport { IMapMarker } from './marker.interface';\nimport { EnvironmentFilled } from '@ant-design/icons';\nimport { Popover } from 'antd';\n\nexport const Marker: FunctionComponent<IMapMarker> = (props) => {\n    return (\n        <Popover\n            content={props.content}\n            title={props.title}\n        >\n            <div style={{\n                fontWeight: 'bolder',\n                color: 'white',\n                width: '100%'\n            }}>\n                <EnvironmentFilled \n                    onClick={() => {\n                        props.handleMarkerIconClick({\n                            title: props.title,\n                            content: props.content,\n                            color: 'green',\n                            text: 'destination',\n                            location: {\n                                lat: props.lat,\n                                lng: props.lng\n                            }\n                        })\n                    }}\n                    style={{\n                        fontSize: '30px',\n                        color: props.color\n                    }}\n                ></EnvironmentFilled>\n            </div>\n        </Popover>\n    )\n}","export const darkMapStyleOptions = [\n    {\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#212121\"\n        }\n      ]\n    },\n    {\n      \"elementType\": \"labels.icon\",\n      \"stylers\": [\n        {\n          \"visibility\": \"off\"\n        }\n      ]\n    },\n    {\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#757575\"\n        }\n      ]\n    },\n    {\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#212121\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"administrative\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#757575\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"administrative.country\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#9e9e9e\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"administrative.land_parcel\",\n      \"stylers\": [\n        {\n          \"visibility\": \"off\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"administrative.locality\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#bdbdbd\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#757575\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi.park\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#181818\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi.park\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#616161\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi.park\",\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#1b1b1b\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road\",\n      \"elementType\": \"geometry.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#2c2c2c\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#8a8a8a\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.arterial\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#373737\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.highway\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#3c3c3c\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.highway.controlled_access\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#4e4e4e\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.local\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#616161\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"transit\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#757575\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"water\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#000000\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"water\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#3d3d3d\"\n        }\n      ]\n    }\n  ]","export const DEFAULT_SEARCH_RADIUS = 10; // 10Km\nexport const GOOGLE_API_KEY = 'AIzaSyCTBRe18aNjO1y6ZF44Eyp0n2gddKtUYgc';\nexport const DEFAULT_LAT_LNG = {\n    lat: 6.54,\n    lng: 3.39\n}\n\nexport const genRegex = (query: string) => {\n    return new RegExp(query, 'gi')\n}\n\nexport const radiusToZoom = (radius: number) => {\n    if (radius > 39) {\n        return 9;\n    } else if (radius > 24) {\n        return 10;\n    } else if (radius > 15) {\n        return 11;\n    } else if (radius > 9) {\n        return 12;\n    } else {\n        return 13;\n    }\n}\n\nexport const marks = {\n    1: '1 KM',\n    10: '10 KM',\n    20: '20 KM',\n    30: '30 KM',\n    40: '40 KM'\n}\n\nexport const PartialUserMapIcon = {\n    content: '',\n    title: 'You',\n    color: 'red',\n    text: 'you'\n}","import React, { FunctionComponent } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport { IMapContainer } from './map.interface';\nimport { Marker } from './Marker/marker';\nimport { darkMapStyleOptions } from './constants';\nimport { GOOGLE_API_KEY } from '../lib/utils/constants';\n\n\n\nexport const MapContainer: FunctionComponent<IMapContainer> = (props) => {\n\n  const {center, zoom, markerLocations, handleMarkerIconClick } = props\n\n    const initializeMap = (map: any, maps: any) => {\n        const styledMap = new maps.StyledMapType(darkMapStyleOptions)\n\n        map.mapTypes.set('styled_map', styledMap);\n        map.setMapTypeId('styled_map');\n    }\n\n    return (\n        <div style={{\n            flex: 1,\n            width: '100%'\n        }}>\n            <GoogleMapReact\n                zoom={zoom}\n                bootstrapURLKeys={{key: GOOGLE_API_KEY}} // didn't bother hiding because the key is restricted\n                center={center}\n                yesIWantToUseGoogleMapApiInternals\n                onGoogleApiLoaded={({map, maps}) => {initializeMap(map, maps)}}\n            >\n                {markerLocations.map(({location, color, text, title, content}) => {\n                    return (\n                        <Marker \n                            title={title}\n                            content={content}\n                            handleMarkerIconClick={handleMarkerIconClick} \n                            key={text} \n                            lat={location.lat} \n                            lng={location.lng} \n                            color={color} \n                            text={text}\n                            />\n                        )\n                })}\n            </GoogleMapReact>\n        </div>\n    )\n};","import React, { FunctionComponent } from 'react';\nimport { Slider, Input } from 'antd';\nimport { EnvironmentOutlined } from '@ant-design/icons';\nimport { ISearchBarProps } from './searchbar.interface';\n\nconst { Search } = Input;\n\nexport const SearchBar: FunctionComponent<ISearchBarProps> = (props) => {\n    return (\n        <>\n            <Search\n                enterButton\n                placeholder=' search by name...'\n                prefix={<EnvironmentOutlined/>} \n                size='large' \n                onChange={props.handleSearchInputChange} \n                value={props.query}\n                style={{\n                    marginBottom: '10px',\n                }}\n            />\n            <Slider \n                min={0} \n                max={50} \n                marks={props.marks} \n                step={5} \n                range={false}\n                tipFormatter={null}\n                onChange={props.handleSearchRadiusChange} \n                value={props.searchRadius}\n            />\n        </>\n    )\n}","import React, { FunctionComponent } from 'react'\nimport { List } from \"antd\"\nimport { EnvironmentFilled } from '@ant-design/icons'\nimport { getDistance } from 'geolib'\nimport { ISearchResultsProps } from './searchResults.interface'\n\nexport const SearchResults: FunctionComponent<ISearchResultsProps> = (props) => {\n    const { \n        currentPage,\n        handlePageChange,\n        hospitalsData,\n        handleMarkerIconClick,\n        center,\n        pageSize,\n        pagination\n    } = props;\n\n\n    return (\n        <List\n            size='small'\n            pagination={pagination && {\n                current: currentPage,\n                onChange: handlePageChange,\n                pageSize: pageSize,\n            }}\n            dataSource={hospitalsData}\n            renderItem={item => (\n                <List.Item\n                    actions={[\n                        <EnvironmentFilled \n                            key='view-on-map'\n                            onClick={() => handleMarkerIconClick({\n                                title: item.name,\n                                content: item.formatted_address,\n                                location: item.geometry.location,\n                                color: 'green',\n                                text: 'destination'\n                            })}\n                            />\n                    ]}\n                >\n                    <List.Item.Meta\n                        title={item.name}\n                        description={item.formatted_address}\n                    />\n                    <div>{\n                        (getDistance(item.geometry.location, center) / 1000).toFixed(1)\n                    }km</div>\n                </List.Item>\n                )\n            }\n        >\n            \n        </List>\n    )\n}","import React, { FunctionComponent } from 'react';\nimport { Divider, Typography, Skeleton, Row, Col } from 'antd';\nimport { SearchBar } from './SearchBar/searchBar';\nimport { ISearchPanelProps } from './searchPanel.interface';\nimport { FaMapMarkedAlt } from 'react-icons/fa';\nimport { SearchResults } from './SearchResults/searchResults';\n\nconst { Text } = Typography;\n\nexport const SearchPanel: FunctionComponent<ISearchPanelProps> = (props) => {\n\n    const { cropped, center, hospitalsData, dataIsLoading, currentPage, handlePageChange, handleMarkerIconClick, ...searchBarProps } = props;\n    const customSearchText = `Showing hospitals ${searchBarProps.query ? `matching '${searchBarProps.query}'` : ''} within ${searchBarProps.searchRadius}KM of you`;\n\n    return (\n        <>\n            <SearchBar {...searchBarProps}/>\n            <Divider></Divider>\n            {cropped && <Row justify='space-between'>\n                <Col>\n                    <Text strong>{customSearchText}</Text>\n                </Col>\n                <Col>\n                    <FaMapMarkedAlt style={{\n                        fontSize: '28px',\n                        color: '#08979c'\n                    }}/>\n                </Col>\n            </Row>}\n            {cropped && <Skeleton \n                loading={dataIsLoading}\n                active\n            >\n                <Divider></Divider>\n                <SearchResults\n                    pagination={true}\n                    handleMarkerIconClick={handleMarkerIconClick}\n                    center={center}\n                    handlePageChange={handlePageChange}\n                    pageSize={6}\n                    hospitalsData={hospitalsData}\n                    currentPage={currentPage}\n                />\n            </Skeleton>}\n        </>\n    )\n}","import { LatLng } from \"../../Map/map.interface\";\nimport { DEFAULT_SEARCH_RADIUS, DEFAULT_LAT_LNG } from \"./constants\";\n\nexport const fetchHospitals = async (radius: number = DEFAULT_SEARCH_RADIUS, location: LatLng = DEFAULT_LAT_LNG) => {\n    const radiusInMetres = radius * 1000;\n    const response = await fetch('https://david-enye-cc.ml/places/hospitals', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            radius: radiusInMetres,\n            latlng: [location.lat, location.lng]\n        })\n    });\n\n    const parsedData = await response.json();\n    return parsedData;\n}","import React, { FunctionComponent, useState, ChangeEvent, useEffect } from 'react';\nimport { Place } from '@googlemaps/google-maps-services-js'\nimport { Row, Col, Typography, Grid, Drawer } from 'antd';\nimport { MapContainer } from './Map/map';\nimport { SearchPanel } from './SearchPanel/searchPanel';\nimport { fetchHospitals } from './lib/utils/placesRequest';\nimport { DEFAULT_LAT_LNG, genRegex, radiusToZoom, marks, PartialUserMapIcon } from './lib/utils/constants';\nimport { MarkerOptions } from './Map/map.interface';\nimport { getDistance } from 'geolib';\nimport { SearchResults } from './SearchPanel/SearchResults/searchResults';\n\nconst { Title } = Typography;\nconst { useBreakpoint } = Grid;\n\nexport const App: FunctionComponent = () => {\n\n    // initialize states\n    const [ allHospitalsData, setAllHospitalsData ] = useState<Place[]>([]);\n    const [searchRadius, setSearchRadius] = useState(10);\n    const [query, setQuery] = useState('');\n    const [ hospitalsData, setHospitalsData ] = useState(allHospitalsData);\n    const [ dataIsLoading, setDataIsLoading ] = useState(true);\n    const [center, setCenter] = useState(DEFAULT_LAT_LNG);\n    const [ currentPage, setCurrentPage ] = useState(1);\n    const [ mapMarkers, setMapMarkers ] = useState<MarkerOptions[]>([])\n    const [ mapZoom, setMapZoom ] = useState(13);\n    const [ drawerIsOpen, setDrawerIsOpen ] = useState(false);\n    const { xl } = useBreakpoint();\n\n    // Data fetching effect\n    useEffect(() => {\n        \n        if(center.lat !== DEFAULT_LAT_LNG.lat && center.lng !== DEFAULT_LAT_LNG.lng)\n        {\n            fetchHospitals(searchRadius, center).then(response => {\n                const { data }: { data: Place[] } = response;\n                const filtered = data.filter((item) => {\n                    if(item.geometry) {\n                        return (getDistance(item.geometry.location, center) / 1000) < searchRadius\n                    }\n                    return false;\n                }).sort((itemA, itemB) => {\n                    // sorts based of their proximity to the user\n                    if((itemA.geometry&& itemB.geometry) && (getDistance(itemA.geometry.location, center) > getDistance(itemB.geometry.location, center))) {\n                        return 1;\n                    }\n\n                    if((itemA.geometry&& itemB.geometry) && (getDistance(itemA.geometry.location, center) < getDistance(itemB.geometry.location, center))) {\n                        return -1;\n                    }\n\n                    return 0;\n                })\n                setAllHospitalsData(filtered);\n\n                let queryFiltered;\n\n                if (query) {\n                    queryFiltered = filteredHospitalData(filtered, query)\n                }\n\n                setHospitalsData(queryFiltered ? queryFiltered : filtered)\n                setDataIsLoading(false);\n\n                const markers = (queryFiltered ? queryFiltered : filtered).map((item: any) => {\n                    return {\n                        content: item.formatted_address,\n                        title: item.name,\n                        color: 'white',\n                        text: item.id,\n                        location: item.geometry.location\n                    }\n                });\n\n                setMapMarkers([...markers, {\n                    ...PartialUserMapIcon,\n                    location: center\n                }])\n            })\n        }\n    }, [searchRadius, center, query])\n\n    // get current location\n    useEffect(() => {\n        if('geolocation' in navigator) {\n            navigator.geolocation.getCurrentPosition((position) => {\n                const { latitude, longitude } = position.coords;\n                setCenter({\n                    lat: latitude,\n                    lng: longitude\n                })\n                setMapMarkers([\n                    { \n                        ...PartialUserMapIcon,\n                        location: {\n                            lat: latitude,\n                            lng: longitude\n                        }\n                    }\n                ]);\n            })\n        }\n    }, []);\n\n\n    // Event Handlers\n    const filteredHospitalData = (data: any, query: string) => {\n        return data.filter(({name}: { name: string}) => {\n            return name.match(genRegex(query))\n        });\n    }\n\n    const handleSearchInputChange = async (e: ChangeEvent<HTMLInputElement>) => {\n        const query = e.target.value\n        setQuery(query);\n        setCurrentPage(1);  // reset current page because the data has been filtered\n        setHospitalsData(filteredHospitalData(allHospitalsData, query))\n        setDrawerIsOpen(true);\n\n    }\n\n    const handleSearchRadiusChange = (value: number | [number, number]) => {\n        setDataIsLoading(true); // set skeleton to loading\n        setCurrentPage(1); // reset current page because the data has been changed\n        setSearchRadius(Array.isArray(value) ? value[0] : value)\n\n        const realValue: number = typeof value === 'number' ? value : value[0];\n        const zoom = radiusToZoom(realValue);\n        \n        setMapZoom(zoom);\n    }\n\n    const handlePageChange = (page: number, pageSIze: number | undefined) => {\n        setCurrentPage(page)\n    }\n\n    const handleMarkerIconClick = (location: MarkerOptions) => {\n        setMapMarkers([{\n            ...PartialUserMapIcon,\n            location: center\n        }, location])\n\n        if(xl) {\n            setDrawerIsOpen(false);\n        } else {\n            setQuery(location.title)\n            setDrawerIsOpen(true)\n        }\n    }\n\n    // render\n\n    const columnSpan = xl ? 12 : 24; // if the screen size is xl split into 2 columns if not take full page\n    return <Row style={{\n        display: 'flex',\n        flexFlow: xl ? 'row' : 'column',\n        height: '100vh',\n        alignItems: 'stretch'\n    }}>\n        <Col span={columnSpan} style={{\n            padding: '24px 24px 0 24px',\n            backgroundColor: '#ffffff',\n            flex: (xl) ? '0 0 100%' :'none'\n        }}>\n            <Title level={xl ? 2 : 4}>Find nearest hospital</Title>\n            <SearchPanel\n                cropped={!!xl}\n                handleMarkerIconClick={handleMarkerIconClick}\n                handleSearchInputChange={handleSearchInputChange}\n                handleSearchRadiusChange={handleSearchRadiusChange}\n                handlePageChange={handlePageChange}\n                marks={marks}\n                hospitalsData={hospitalsData}\n                searchRadius={searchRadius}\n                query={query}\n                dataIsLoading={dataIsLoading}\n                currentPage={currentPage}\n                center={center}\n            />\n        </Col>\n        <Col span={columnSpan} style={{\n            backgroundColor: '#eeeeee',\n            display: 'flex',\n            flex: 1,\n            overflow: 'auto'\n        }}>\n            <MapContainer\n                handleMarkerIconClick={handleMarkerIconClick}\n                center={center}\n                setCenter={setCenter}\n                zoom={mapZoom}\n                markerLocations={mapMarkers}\n            ></MapContainer>\n        </Col>\n        { !xl &&\n            <Drawer\n                title=\"Results\"\n                placement=\"bottom\"\n                onClose={() => {\n                    setDrawerIsOpen(false)\n                }}\n                visible={drawerIsOpen}\n                mask={false}\n            >\n                <SearchResults\n                    pagination={false}\n                    handleMarkerIconClick={handleMarkerIconClick}\n                    handlePageChange={handlePageChange}\n                    center={center}\n                    hospitalsData={hospitalsData}\n                    currentPage={currentPage}\n                    pageSize={3}\n                ></SearchResults>\n            </Drawer>\n        }\n    </Row>\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport * as serviceWorker from './serviceWorker';\nimport { App } from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}