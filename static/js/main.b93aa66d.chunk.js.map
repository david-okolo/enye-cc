{"version":3,"sources":["serviceWorker.ts","Map/Marker/marker.tsx","Map/constants.ts","lib/utils/constants.ts","Map/map.tsx","SearchPanel/SearchBar/searchBar.tsx","SearchPanel/SearchResults/searchResults.tsx","SearchPanel/searchPanel.tsx","lib/utils/placesRequest.ts","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Marker","props","content","title","style","fontWeight","color","width","EnvironmentFilled","onClick","handleMarkerIconClick","text","lat","lng","fontSize","darkMapStyleOptions","DEFAULT_LAT_LNG","marks","1","10","20","30","40","PartialUserMapIcon","MapContainer","center","zoom","markerLocations","flex","bootstrapURLKeys","key","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","map","maps","styledMap","StyledMapType","mapTypes","set","setMapTypeId","initializeMap","Search","Input","SearchBar","enterButton","placeholder","prefix","EnvironmentOutlined","size","onChange","handleSearchInputChange","value","query","marginBottom","min","max","step","range","tipFormatter","handleSearchRadiusChange","searchRadius","SearchResults","currentPage","handlePageChange","hospitalsData","pageSize","pagination","current","dataSource","renderItem","item","Item","actions","name","formatted_address","geometry","Meta","description","getDistance","toFixed","Text","Typography","SearchPanel","cropped","dataIsLoading","searchBarProps","customSearchText","justify","strong","loading","active","fetchHospitals","a","radius","radiusInMetres","fetch","method","headers","body","JSON","stringify","latlng","response","json","parsedData","Title","useBreakpoint","Grid","App","useState","allHospitalsData","setAllHospitalsData","setSearchRadius","setQuery","setHospitalsData","setDataIsLoading","setCenter","setCurrentPage","mapMarkers","setMapMarkers","mapZoom","setMapZoom","drawerIsOpen","setDrawerIsOpen","xl","useEffect","then","queryFiltered","data","filteredHospitalData","markers","id","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","filter","RegExp","genRegex","e","target","page","pageSIze","columnSpan","display","flexFlow","height","alignItems","span","padding","backgroundColor","level","Array","isArray","realValue","overflow","placement","onClose","visible","mask","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b93aa66d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { FunctionComponent } from 'react';\r\nimport { IMapMarker } from './marker.interface';\r\nimport { EnvironmentFilled } from '@ant-design/icons';\r\nimport { Popover } from 'antd';\r\n\r\nexport const Marker: FunctionComponent<IMapMarker> = (props) => {\r\n    return (\r\n        <Popover\r\n            content={props.content}\r\n            title={props.title}\r\n        >\r\n            <div style={{\r\n                fontWeight: 'bolder',\r\n                color: 'white',\r\n                width: '100%'\r\n            }}>\r\n                <EnvironmentFilled \r\n                    onClick={() => {\r\n                        props.handleMarkerIconClick({\r\n                            title: props.title,\r\n                            content: props.content,\r\n                            color: 'green',\r\n                            text: 'destination',\r\n                            location: {\r\n                                lat: props.lat,\r\n                                lng: props.lng\r\n                            }\r\n                        })\r\n                    }}\r\n                    style={{\r\n                        fontSize: '30px',\r\n                        color: props.color\r\n                    }}\r\n                ></EnvironmentFilled>\r\n            </div>\r\n        </Popover>\r\n    )\r\n}","export const darkMapStyleOptions = [\r\n    {\r\n      \"elementType\": \"geometry\",\r\n      \"stylers\": [\r\n        {\r\n          \"color\": \"#212121\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"elementType\": \"labels.icon\",\r\n      \"stylers\": [\r\n        {\r\n          \"visibility\": \"off\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"elementType\": \"labels.text.fill\",\r\n      \"stylers\": [\r\n        {\r\n          \"color\": \"#757575\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"elementType\": \"labels.text.stroke\",\r\n      \"stylers\": [\r\n        {\r\n          \"color\": \"#212121\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"featureType\": \"administrative\",\r\n      \"elementType\": \"geometry\",\r\n      \"stylers\": [\r\n        {\r\n          \"color\": \"#757575\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"featureType\": \"administrative.country\",\r\n      \"elementType\": \"labels.text.fill\",\r\n      \"stylers\": [\r\n        {\r\n          \"color\": \"#9e9e9e\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"featureType\": \"administrative.land_parcel\",\r\n      \"stylers\": [\r\n        {\r\n          \"visibility\": \"off\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"featureType\": \"administrative.locality\",\r\n      \"elementType\": \"labels.text.fill\",\r\n      \"stylers\": [\r\n        {\r\n          \"color\": \"#bdbdbd\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"featureType\": \"poi\",\r\n      \"elementType\": \"labels.text.fill\",\r\n      \"stylers\": [\r\n        {\r\n          \"color\": \"#757575\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"featureType\": \"poi.park\",\r\n      \"elementType\": \"geometry\",\r\n      \"stylers\": [\r\n        {\r\n          \"color\": \"#181818\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"featureType\": \"poi.park\",\r\n      \"elementType\": \"labels.text.fill\",\r\n      \"stylers\": [\r\n        {\r\n          \"color\": \"#616161\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"featureType\": \"poi.park\",\r\n      \"elementType\": \"labels.text.stroke\",\r\n      \"stylers\": [\r\n        {\r\n          \"color\": \"#1b1b1b\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"featureType\": \"road\",\r\n      \"elementType\": \"geometry.fill\",\r\n      \"stylers\": [\r\n        {\r\n          \"color\": \"#2c2c2c\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"featureType\": \"road\",\r\n      \"elementType\": \"labels.text.fill\",\r\n      \"stylers\": [\r\n        {\r\n          \"color\": \"#8a8a8a\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"featureType\": \"road.arterial\",\r\n      \"elementType\": \"geometry\",\r\n      \"stylers\": [\r\n        {\r\n          \"color\": \"#373737\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"featureType\": \"road.highway\",\r\n      \"elementType\": \"geometry\",\r\n      \"stylers\": [\r\n        {\r\n          \"color\": \"#3c3c3c\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"featureType\": \"road.highway.controlled_access\",\r\n      \"elementType\": \"geometry\",\r\n      \"stylers\": [\r\n        {\r\n          \"color\": \"#4e4e4e\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"featureType\": \"road.local\",\r\n      \"elementType\": \"labels.text.fill\",\r\n      \"stylers\": [\r\n        {\r\n          \"color\": \"#616161\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"featureType\": \"transit\",\r\n      \"elementType\": \"labels.text.fill\",\r\n      \"stylers\": [\r\n        {\r\n          \"color\": \"#757575\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"featureType\": \"water\",\r\n      \"elementType\": \"geometry\",\r\n      \"stylers\": [\r\n        {\r\n          \"color\": \"#000000\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"featureType\": \"water\",\r\n      \"elementType\": \"labels.text.fill\",\r\n      \"stylers\": [\r\n        {\r\n          \"color\": \"#3d3d3d\"\r\n        }\r\n      ]\r\n    }\r\n  ]","export const DEFAULT_SEARCH_RADIUS = 10; // 10Km\r\nexport const GOOGLE_API_KEY = 'AIzaSyCTBRe18aNjO1y6ZF44Eyp0n2gddKtUYgc';\r\nexport const DEFAULT_LAT_LNG = {\r\n    lat: 6.54,\r\n    lng: 3.39\r\n}\r\n\r\nexport const genRegex = (query: string) => {\r\n    return new RegExp(query, 'gi')\r\n}\r\n\r\nexport const radiusToZoom = (radius: number) => {\r\n    if (radius > 39) {\r\n        return 9;\r\n    } else if (radius > 24) {\r\n        return 10;\r\n    } else if (radius > 15) {\r\n        return 11;\r\n    } else if (radius > 9) {\r\n        return 12;\r\n    } else {\r\n        return 13;\r\n    }\r\n}\r\n\r\nexport const marks = {\r\n    1: '1 KM',\r\n    10: '10 KM',\r\n    20: '20 KM',\r\n    30: '30 KM',\r\n    40: '40 KM'\r\n}\r\n\r\nexport const PartialUserMapIcon = {\r\n    content: '',\r\n    title: 'You',\r\n    color: 'red',\r\n    text: 'you'\r\n}","import React, { FunctionComponent } from 'react';\r\nimport GoogleMapReact from 'google-map-react';\r\nimport { IMapContainer } from './map.interface';\r\nimport { Marker } from './Marker/marker';\r\nimport { darkMapStyleOptions } from './constants';\r\nimport { GOOGLE_API_KEY } from '../lib/utils/constants';\r\n\r\n\r\n\r\nexport const MapContainer: FunctionComponent<IMapContainer> = (props) => {\r\n\r\n  const {center, zoom, markerLocations, handleMarkerIconClick } = props\r\n\r\n    const initializeMap = (map: any, maps: any) => {\r\n        const styledMap = new maps.StyledMapType(darkMapStyleOptions)\r\n\r\n        map.mapTypes.set('styled_map', styledMap);\r\n        map.setMapTypeId('styled_map');\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            flex: 1,\r\n            width: '100%'\r\n        }}>\r\n            <GoogleMapReact\r\n                zoom={zoom}\r\n                bootstrapURLKeys={{key: GOOGLE_API_KEY}} // didn't bother hiding because the key is restricted\r\n                center={center}\r\n                yesIWantToUseGoogleMapApiInternals\r\n                onGoogleApiLoaded={({map, maps}) => {initializeMap(map, maps)}}\r\n            >\r\n                {markerLocations.map(({location, color, text, title, content}) => {\r\n                    return (\r\n                        <Marker \r\n                            title={title}\r\n                            content={content}\r\n                            handleMarkerIconClick={handleMarkerIconClick} \r\n                            key={text} \r\n                            lat={location.lat} \r\n                            lng={location.lng} \r\n                            color={color} \r\n                            text={text}\r\n                            />\r\n                        )\r\n                })}\r\n            </GoogleMapReact>\r\n        </div>\r\n    )\r\n};","import React, { FunctionComponent } from 'react';\r\nimport { Slider, Input } from 'antd';\r\nimport { EnvironmentOutlined } from '@ant-design/icons';\r\nimport { ISearchBarProps } from './searchbar.interface';\r\n\r\nconst { Search } = Input;\r\n\r\nexport const SearchBar: FunctionComponent<ISearchBarProps> = (props) => {\r\n    return (\r\n        <>\r\n            <Search\r\n                enterButton\r\n                placeholder=' search by name...'\r\n                prefix={<EnvironmentOutlined/>} \r\n                size='large' \r\n                onChange={props.handleSearchInputChange} \r\n                value={props.query}\r\n                style={{\r\n                    marginBottom: '10px',\r\n                }}\r\n            />\r\n            <Slider \r\n                min={0} \r\n                max={50} \r\n                marks={props.marks} \r\n                step={5} \r\n                range={false}\r\n                tipFormatter={null}\r\n                onChange={props.handleSearchRadiusChange} \r\n                value={props.searchRadius}\r\n            />\r\n        </>\r\n    )\r\n}","import React, { FunctionComponent } from 'react'\r\nimport { List } from \"antd\"\r\nimport { EnvironmentFilled } from '@ant-design/icons'\r\nimport { getDistance } from 'geolib'\r\nimport { ISearchResultsProps } from './searchResults.interface'\r\n\r\nexport const SearchResults: FunctionComponent<ISearchResultsProps> = (props) => {\r\n    const { \r\n        currentPage,\r\n        handlePageChange,\r\n        hospitalsData,\r\n        handleMarkerIconClick,\r\n        center,\r\n        pageSize,\r\n        pagination\r\n    } = props;\r\n\r\n\r\n    return (\r\n        <List\r\n            size='small'\r\n            pagination={pagination && {\r\n                current: currentPage,\r\n                onChange: handlePageChange,\r\n                pageSize: pageSize,\r\n            }}\r\n            dataSource={hospitalsData}\r\n            renderItem={item => (\r\n                <List.Item\r\n                    actions={[\r\n                        <EnvironmentFilled \r\n                            key='view-on-map'\r\n                            onClick={() => handleMarkerIconClick({\r\n                                title: item.name,\r\n                                content: item.formatted_address,\r\n                                location: item.geometry.location,\r\n                                color: 'green',\r\n                                text: 'destination'\r\n                            })}\r\n                            />\r\n                    ]}\r\n                >\r\n                    <List.Item.Meta\r\n                        title={item.name}\r\n                        description={item.formatted_address}\r\n                    />\r\n                    <div>{\r\n                        (getDistance(item.geometry.location, center) / 1000).toFixed(1)\r\n                    }km</div>\r\n                </List.Item>\r\n                )\r\n            }\r\n        >\r\n            \r\n        </List>\r\n    )\r\n}","import React, { FunctionComponent } from 'react';\r\nimport { Divider, Typography, Skeleton, Row, Col } from 'antd';\r\nimport { SearchBar } from './SearchBar/searchBar';\r\nimport { ISearchPanelProps } from './searchPanel.interface';\r\nimport { FaMapMarkedAlt } from 'react-icons/fa';\r\nimport { SearchResults } from './SearchResults/searchResults';\r\n\r\nconst { Text } = Typography;\r\n\r\nexport const SearchPanel: FunctionComponent<ISearchPanelProps> = (props) => {\r\n\r\n    const { cropped, center, hospitalsData, dataIsLoading, currentPage, handlePageChange, handleMarkerIconClick, ...searchBarProps } = props;\r\n    const customSearchText = `Showing hospitals ${searchBarProps.query ? `matching '${searchBarProps.query}'` : ''} within ${searchBarProps.searchRadius}KM of you`;\r\n\r\n    return (\r\n        <>\r\n            <SearchBar {...searchBarProps}/>\r\n            <Divider></Divider>\r\n            {cropped && <Row justify='space-between'>\r\n                <Col>\r\n                    <Text strong>{customSearchText}</Text>\r\n                </Col>\r\n                <Col>\r\n                    <FaMapMarkedAlt style={{\r\n                        fontSize: '28px',\r\n                        color: '#08979c'\r\n                    }}/>\r\n                </Col>\r\n            </Row>}\r\n            {cropped && <Skeleton \r\n                loading={dataIsLoading}\r\n                active\r\n            >\r\n                <Divider></Divider>\r\n                <SearchResults\r\n                    pagination={true}\r\n                    handleMarkerIconClick={handleMarkerIconClick}\r\n                    center={center}\r\n                    handlePageChange={handlePageChange}\r\n                    pageSize={6}\r\n                    hospitalsData={hospitalsData}\r\n                    currentPage={currentPage}\r\n                />\r\n            </Skeleton>}\r\n        </>\r\n    )\r\n}","import { LatLng } from \"../../Map/map.interface\";\r\nimport { DEFAULT_SEARCH_RADIUS, DEFAULT_LAT_LNG } from \"./constants\";\r\n\r\nexport const fetchHospitals = async (radius: number = DEFAULT_SEARCH_RADIUS, location: LatLng = DEFAULT_LAT_LNG) => {\r\n    const radiusInMetres = radius * 1000;\r\n    const response = await fetch('https://david-enye-cc.ml/places/hospitals', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            radius: radiusInMetres,\r\n            latlng: [location.lat, location.lng]\r\n        })\r\n    });\r\n\r\n    const parsedData = await response.json();\r\n    return parsedData;\r\n}","import React, { FunctionComponent, useState, ChangeEvent, useEffect } from 'react';\r\nimport { Place } from '@googlemaps/google-maps-services-js'\r\nimport { Row, Col, Typography, Grid, Drawer } from 'antd';\r\nimport { MapContainer } from './Map/map';\r\nimport { SearchPanel } from './SearchPanel/searchPanel';\r\nimport { fetchHospitals } from './lib/utils/placesRequest';\r\nimport { DEFAULT_LAT_LNG, genRegex, radiusToZoom, marks, PartialUserMapIcon } from './lib/utils/constants';\r\nimport { MarkerOptions } from './Map/map.interface';\r\nimport { SearchResults } from './SearchPanel/SearchResults/searchResults';\r\n\r\nconst { Title } = Typography;\r\nconst { useBreakpoint } = Grid;\r\n\r\nexport const App: FunctionComponent = () => {\r\n\r\n    // initialize states\r\n    const [ allHospitalsData, setAllHospitalsData ] = useState<Place[]>([]);\r\n    const [searchRadius, setSearchRadius] = useState(10);\r\n    const [query, setQuery] = useState('');\r\n    const [ hospitalsData, setHospitalsData ] = useState(allHospitalsData);\r\n    const [ dataIsLoading, setDataIsLoading ] = useState(true);\r\n    const [center, setCenter] = useState(DEFAULT_LAT_LNG);\r\n    const [ currentPage, setCurrentPage ] = useState(1);\r\n    const [ mapMarkers, setMapMarkers ] = useState<MarkerOptions[]>([])\r\n    const [ mapZoom, setMapZoom ] = useState(13);\r\n    const [ drawerIsOpen, setDrawerIsOpen ] = useState(false);\r\n    const { xl } = useBreakpoint();\r\n\r\n    // Data fetching effect\r\n    useEffect(() => {\r\n        \r\n        if(center.lat !== DEFAULT_LAT_LNG.lat && center.lng !== DEFAULT_LAT_LNG.lng)\r\n        {\r\n            fetchHospitals(searchRadius, center).then(response => {\r\n                const { data }: { data: Place[] } = response;\r\n                setAllHospitalsData(data);\r\n\r\n                let queryFiltered;\r\n\r\n                if (query) {\r\n                    queryFiltered = filteredHospitalData(data, query)\r\n                }\r\n\r\n                setHospitalsData(queryFiltered ? queryFiltered : data)\r\n                setDataIsLoading(false);\r\n\r\n                const markers = (queryFiltered ? queryFiltered : data).map((item: any) => {\r\n                    return {\r\n                        content: item.formatted_address,\r\n                        title: item.name,\r\n                        color: 'white',\r\n                        text: item.id,\r\n                        location: item.geometry.location\r\n                    }\r\n                });\r\n\r\n                setMapMarkers([...markers, {\r\n                    ...PartialUserMapIcon,\r\n                    location: center\r\n                }])\r\n            })\r\n        }\r\n    }, [searchRadius, center, query])\r\n\r\n    // get current location\r\n    useEffect(() => {\r\n        if('geolocation' in navigator) {\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                const { latitude, longitude } = position.coords;\r\n                setCenter({\r\n                    lat: latitude,\r\n                    lng: longitude\r\n                })\r\n                setMapMarkers([\r\n                    { \r\n                        ...PartialUserMapIcon,\r\n                        location: {\r\n                            lat: latitude,\r\n                            lng: longitude\r\n                        }\r\n                    }\r\n                ]);\r\n            })\r\n        }\r\n    }, []);\r\n\r\n\r\n    // Event Handlers\r\n    const filteredHospitalData = (data: any, query: string) => {\r\n        return data.filter(({name}: { name: string}) => {\r\n            return name.match(genRegex(query))\r\n        });\r\n    }\r\n\r\n    const handleSearchInputChange = async (e: ChangeEvent<HTMLInputElement>) => {\r\n        const query = e.target.value\r\n        setQuery(query);\r\n        setCurrentPage(1);  // reset current page because the data has been filtered\r\n        setHospitalsData(filteredHospitalData(allHospitalsData, query))\r\n        setDrawerIsOpen(true);\r\n\r\n    }\r\n\r\n    const handleSearchRadiusChange = (value: number | [number, number]) => {\r\n        setDataIsLoading(true); // set skeleton to loading\r\n        setCurrentPage(1); // reset current page because the data has been changed\r\n        setSearchRadius(Array.isArray(value) ? value[0] : value)\r\n\r\n        const realValue: number = typeof value === 'number' ? value : value[0];\r\n        const zoom = radiusToZoom(realValue);\r\n        \r\n        setMapZoom(zoom);\r\n    }\r\n\r\n    const handlePageChange = (page: number, pageSIze: number | undefined) => {\r\n        setCurrentPage(page)\r\n    }\r\n\r\n    const handleMarkerIconClick = (location: MarkerOptions) => {\r\n        setMapMarkers([{\r\n            ...PartialUserMapIcon,\r\n            location: center\r\n        }, location])\r\n\r\n        if(xl) {\r\n            setDrawerIsOpen(false);\r\n        } else {\r\n            setQuery(location.title)\r\n            setDrawerIsOpen(true)\r\n        }\r\n    }\r\n\r\n    // render\r\n\r\n    const columnSpan = xl ? 12 : 24; // if the screen size is xl split into 2 columns if not take full page\r\n    return <Row style={{\r\n        display: 'flex',\r\n        flexFlow: xl ? 'row' : 'column',\r\n        height: '100vh',\r\n        alignItems: 'stretch'\r\n    }}>\r\n        <Col span={columnSpan} style={{\r\n            padding: '24px 24px 0 24px',\r\n            backgroundColor: '#ffffff',\r\n            flex: (xl) ? '0 0 100%' :'none'\r\n        }}>\r\n            <Title level={xl ? 2 : 4}>Find nearest hospital</Title>\r\n            <SearchPanel\r\n                cropped={!!xl}\r\n                handleMarkerIconClick={handleMarkerIconClick}\r\n                handleSearchInputChange={handleSearchInputChange}\r\n                handleSearchRadiusChange={handleSearchRadiusChange}\r\n                handlePageChange={handlePageChange}\r\n                marks={marks}\r\n                hospitalsData={hospitalsData}\r\n                searchRadius={searchRadius}\r\n                query={query}\r\n                dataIsLoading={dataIsLoading}\r\n                currentPage={currentPage}\r\n                center={center}\r\n            />\r\n        </Col>\r\n        <Col span={columnSpan} style={{\r\n            backgroundColor: '#eeeeee',\r\n            display: 'flex',\r\n            flex: 1,\r\n            overflow: 'auto'\r\n        }}>\r\n            <MapContainer\r\n                handleMarkerIconClick={handleMarkerIconClick}\r\n                center={center}\r\n                setCenter={setCenter}\r\n                zoom={mapZoom}\r\n                markerLocations={mapMarkers}\r\n            ></MapContainer>\r\n        </Col>\r\n        { !xl &&\r\n            <Drawer\r\n                title=\"Results\"\r\n                placement=\"bottom\"\r\n                onClose={() => {\r\n                    setDrawerIsOpen(false)\r\n                }}\r\n                visible={drawerIsOpen}\r\n                mask={false}\r\n            >\r\n                <SearchResults\r\n                    pagination={false}\r\n                    handleMarkerIconClick={handleMarkerIconClick}\r\n                    handlePageChange={handlePageChange}\r\n                    center={center}\r\n                    hospitalsData={hospitalsData}\r\n                    currentPage={currentPage}\r\n                    pageSize={3}\r\n                ></SearchResults>\r\n            </Drawer>\r\n        }\r\n    </Row>\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.less';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}