{"version":3,"sources":["serviceWorker.ts","lib/utils/request.ts","Map/Marker/marker.tsx","Map/constants.ts","lib/utils/constants.ts","Map/map.tsx","SearchPanel/SearchBar/searchBar.tsx","SearchPanel/SearchResults/searchResults.tsx","SearchPanel/searchPanel.tsx","Home/Home.tsx","Accounts/LoginForm.tsx","Accounts/RegisterForm.tsx","Accounts/Accounts.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","HTTPMethod","Marker","props","content","title","style","fontWeight","color","width","EnvironmentFilled","onClick","handleMarkerIconClick","text","lat","lng","fontSize","darkMapStyleOptions","DEFAULT_LAT_LNG","genRegex","query","RegExp","marks","1","10","20","30","40","PartialUserMapIcon","DEFAULT_OPTIONS","value","MapContainer","center","zoom","markerLocations","flex","bootstrapURLKeys","key","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","map","maps","styledMap","StyledMapType","mapTypes","set","setMapTypeId","initializeMap","Search","Input","SearchBar","options","onSearch","onSelect","onChange","handleSearchInputChange","marginBottom","placeholder","size","enterButton","prefix","EnvironmentOutlined","min","max","step","range","tipFormatter","handleSearchRadiusChange","searchRadius","SearchResults","currentPage","handlePageChange","hospitalsData","pageSize","pagination","current","dataSource","renderItem","item","Item","actions","name","formatted_address","geometry","Meta","description","getDistance","toFixed","Text","Typography","SearchPanel","cropped","dataIsLoading","searchBarProps","customSearchText","justify","strong","loading","active","makeRequest","a","path","method","body","auth","result","success","JSON","stringify","headers","localStorage","getItem","fetch","response","ok","json","data","useBreakpoint","Grid","Home","useState","pastClicked","setPastClicked","allHospitalsData","setAllHospitalsData","setSearchRadius","setQuery","setValue","setHospitalsData","setDataIsLoading","setCenter","setCurrentPage","mapMarkers","setMapMarkers","mapZoom","setMapZoom","drawerIsOpen","setDrawerIsOpen","setOptions","xl","useEffect","isLoggedIn","POST","radius","latlng","then","queryFiltered","filterData","markers","id","pastSearches","slice","push","keyword","timestamp","Date","now","setPastSearches","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","filter","filterOptionsData","Array","isArray","realValue","page","pageSIze","option","columnSpan","display","flexFlow","height","alignItems","placement","onClose","setPastSearchVisible","visible","pastSearchVisible","itemLayout","RightCircleOutlined","toLocaleString","span","padding","backgroundColor","overflow","mask","LoginForm","setIsLoggedIn","history","useHistory","setVisible","onFinish","values","username","password","setItem","token","setTimeout","className","initialValues","remember","direction","rules","required","message","LockOutlined","type","valuePropName","noStyle","htmlType","showIcon","RegisterForm","email","UserOutlined","Accounts","useRouteMatch","url","selected","setSelected","offset","mode","selectedKeys","to","exact","App","catch","e","console","log","basename","extra","icon","SearchOutlined","shape","LogoutOutlined","LoginOutlined","removeItem","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.64b5bb81.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { backendUrl } from \"./constants\"\n\nexport enum HTTPMethod {\n    GET = 'GET',\n    POST = 'POST'\n}\n\nexport interface IRequestOptions {\n    path: string\n    method?: HTTPMethod\n    body?: any\n    auth?: boolean\n}\n\nexport const makeRequest = async ({ path, method, body, auth}: IRequestOptions) => {\n\n    const result: any = {\n        success: false\n    }\n\n    const options = {\n        ...(method && { method }),\n        ...(body && { body: JSON.stringify(body)}),\n        headers: {\n            'Content-Type': 'application/json',\n            ...(auth && {'Authorization': `Bearer ${localStorage.getItem('token')}`})\n        }\n    }\n\n    const response = await fetch(`${backendUrl}${path}`, options);\n\n\n    result.success = response.ok;\n\n    if(response.ok)\n    {\n        result.data = await response.json();\n    }\n\n    return result;\n}","import React, { FunctionComponent } from 'react';\nimport { IMapMarker } from './marker.interface';\nimport { EnvironmentFilled } from '@ant-design/icons';\nimport { Popover } from 'antd';\n\nexport const Marker: FunctionComponent<IMapMarker> = (props) => {\n    return (\n        <Popover\n            content={props.content}\n            title={props.title}\n        >\n            <div style={{\n                fontWeight: 'bolder',\n                color: 'white',\n                width: '100%'\n            }}>\n                <EnvironmentFilled \n                    onClick={() => {\n                        props.handleMarkerIconClick({\n                            title: props.title,\n                            content: props.content,\n                            color: 'green',\n                            text: 'destination',\n                            location: {\n                                lat: props.lat,\n                                lng: props.lng\n                            }\n                        })\n                    }}\n                    style={{\n                        fontSize: '30px',\n                        color: props.color\n                    }}\n                ></EnvironmentFilled>\n            </div>\n        </Popover>\n    )\n}","export const darkMapStyleOptions = [\n    {\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#212121\"\n        }\n      ]\n    },\n    {\n      \"elementType\": \"labels.icon\",\n      \"stylers\": [\n        {\n          \"visibility\": \"off\"\n        }\n      ]\n    },\n    {\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#757575\"\n        }\n      ]\n    },\n    {\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#212121\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"administrative\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#757575\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"administrative.country\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#9e9e9e\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"administrative.land_parcel\",\n      \"stylers\": [\n        {\n          \"visibility\": \"off\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"administrative.locality\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#bdbdbd\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#757575\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi.park\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#181818\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi.park\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#616161\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi.park\",\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#1b1b1b\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road\",\n      \"elementType\": \"geometry.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#2c2c2c\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#8a8a8a\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.arterial\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#373737\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.highway\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#3c3c3c\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.highway.controlled_access\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#4e4e4e\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.local\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#616161\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"transit\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#757575\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"water\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#000000\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"water\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#3d3d3d\"\n        }\n      ]\n    }\n  ]","export const DEFAULT_SEARCH_RADIUS = 10; // 10Km\nexport const GOOGLE_API_KEY = 'AIzaSyC43CWO8vyaWVaiCVtMnkpINJgsH0_9rTc';\nexport const DEFAULT_LAT_LNG = {\n    lat: 6.54,\n    lng: 3.39\n}\n\nexport const DEFAULT_QUERY = 'hospitals';\n\nexport const genRegex = (query: string) => {\n    return new RegExp(query, 'gi')\n}\n\nexport const radiusToZoom = (radius: number) => {\n    if (radius > 39) {\n        return 9;\n    } else if (radius > 24) {\n        return 10;\n    } else if (radius > 15) {\n        return 11;\n    } else if (radius > 9) {\n        return 12;\n    } else {\n        return 13;\n    }\n}\n\nexport const marks = {\n    1: '1 KM',\n    10: '10 KM',\n    20: '20 KM',\n    30: '30 KM',\n    40: '40 KM'\n}\n\nexport const PartialUserMapIcon = {\n    content: '',\n    title: 'You',\n    color: 'red',\n    text: 'you'\n}\n\nexport const DEFAULT_OPTIONS = [\n    {\n        value: \"hospital\"\n    },\n    {\n        value: \"pharmacy\"\n    },\n    {\n        value: \"clinic\"\n    },\n    {\n        value: \"medical office\"\n    }\n];\n\nexport const backendUrl = \"https://david-enye-cc.ml\"","import React, { FunctionComponent } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport { IMapContainer } from './map.interface';\nimport { Marker } from './Marker/marker';\nimport { darkMapStyleOptions } from './constants';\nimport { GOOGLE_API_KEY } from '../lib/utils/constants';\n\n\n\nexport const MapContainer: FunctionComponent<IMapContainer> = (props) => {\n\n  const {center, zoom, markerLocations, handleMarkerIconClick } = props\n\n    const initializeMap = (map: any, maps: any) => {\n\n        if(maps && map) {\n            const styledMap = new maps.StyledMapType(darkMapStyleOptions)\n\n            map.mapTypes.set('styled_map', styledMap);\n            map.setMapTypeId('styled_map');\n        }\n    }\n\n    return (\n        <div style={{\n            flex: 1,\n            width: '100%'\n        }}>\n            <GoogleMapReact\n                zoom={zoom}\n                bootstrapURLKeys={{key: GOOGLE_API_KEY}} // didn't bother hiding because the key is restricted\n                center={center}\n                yesIWantToUseGoogleMapApiInternals\n                onGoogleApiLoaded={({map, maps}) => {initializeMap(map, maps)}}\n            >\n                {markerLocations.map(({location, color, text, title, content}) => {\n                    return (\n                        <Marker \n                            title={title}\n                            content={content}\n                            handleMarkerIconClick={handleMarkerIconClick} \n                            key={text} \n                            lat={location.lat} \n                            lng={location.lng} \n                            color={color} \n                            text={text}\n                            />\n                        )\n                })}\n            </GoogleMapReact>\n        </div>\n    )\n};","import React, { FunctionComponent } from 'react';\nimport { Slider, Input, AutoComplete } from 'antd';\nimport { EnvironmentOutlined } from '@ant-design/icons';\nimport { ISearchBarProps } from './searchbar.interface';\n\nconst { Search } = Input;\n\nexport const SearchBar: FunctionComponent<ISearchBarProps> = (props) => {\n    return (\n        <>\n            <AutoComplete\n                options={props.options}\n                onSearch={props.onSearch}\n                onSelect={props.onSelect}\n                onChange={props.handleSearchInputChange} \n                value={props.query}\n                style={{\n                    width: '100%',\n                    marginBottom: '10px',\n                }}\n            >\n                <Search\n                    placeholder=' search by keyword...'\n                    size=\"large\"\n                    enterButton\n                    prefix={<EnvironmentOutlined/>} \n                ></Search>\n            </AutoComplete>\n            <Slider \n                min={0} \n                max={50} \n                marks={props.marks} \n                step={5} \n                range={false}\n                tipFormatter={null}\n                onChange={props.handleSearchRadiusChange} \n                value={props.searchRadius}\n            />\n        </>\n    )\n}","import React, { FunctionComponent } from 'react'\nimport { List } from \"antd\"\nimport { EnvironmentFilled } from '@ant-design/icons'\nimport { getDistance } from 'geolib'\nimport { ISearchResultsProps } from './searchResults.interface'\n\nexport const SearchResults: FunctionComponent<ISearchResultsProps> = (props) => {\n    const { \n        currentPage,\n        handlePageChange,\n        hospitalsData,\n        handleMarkerIconClick,\n        center,\n        pageSize,\n        pagination\n    } = props;\n\n\n    return (\n        <List\n            size='small'\n            pagination={pagination && {\n                current: currentPage,\n                onChange: handlePageChange,\n                pageSize: pageSize,\n            }}\n            dataSource={hospitalsData}\n            renderItem={item => (\n                <List.Item\n                    actions={[\n                        <EnvironmentFilled \n                            key='view-on-map'\n                            onClick={() => handleMarkerIconClick({\n                                title: item.name,\n                                content: item.formatted_address,\n                                location: item.geometry.location,\n                                color: 'green',\n                                text: 'destination'\n                            })}\n                            />\n                    ]}\n                >\n                    <List.Item.Meta\n                        title={item.name}\n                        description={item.formatted_address}\n                    />\n                    <div>{\n                        (getDistance(item.geometry.location, center) / 1000).toFixed(1)\n                    }km</div>\n                </List.Item>\n                )\n            }\n        >\n            \n        </List>\n    )\n}","import React, { FunctionComponent } from 'react';\nimport { Divider, Typography, Skeleton, Row, Col } from 'antd';\nimport { SearchBar } from './SearchBar/searchBar';\nimport { ISearchPanelProps } from './searchPanel.interface';\nimport { FaMapMarkedAlt } from 'react-icons/fa';\nimport { SearchResults } from './SearchResults/searchResults';\n\nconst { Text } = Typography;\n\nexport const SearchPanel: FunctionComponent<ISearchPanelProps> = (props) => {\n\n    const { cropped, center, hospitalsData, dataIsLoading, currentPage, handlePageChange, handleMarkerIconClick, ...searchBarProps } = props;\n    const customSearchText = `Showing hospitals ${searchBarProps.query ? `matching '${searchBarProps.query}'` : ''} within ${searchBarProps.searchRadius}KM of you`;\n\n    return (\n        <>\n            <SearchBar {...searchBarProps}/>\n            <Divider></Divider>\n            {cropped && <Row justify='space-between'>\n                <Col>\n                    <Text strong>{customSearchText}</Text>\n                </Col>\n                <Col>\n                    <FaMapMarkedAlt style={{\n                        fontSize: '28px',\n                        color: '#08979c'\n                    }}/>\n                </Col>\n            </Row>}\n            {cropped && <Skeleton \n                loading={dataIsLoading}\n                active\n            >\n                <Divider></Divider>\n                <SearchResults\n                    pagination={true}\n                    handleMarkerIconClick={handleMarkerIconClick}\n                    center={center}\n                    handlePageChange={handlePageChange}\n                    pageSize={6}\n                    hospitalsData={hospitalsData}\n                    currentPage={currentPage}\n                />\n            </Skeleton>}\n        </>\n    )\n}","import React, { FunctionComponent, useState, useEffect, Dispatch, SetStateAction } from 'react';\nimport { Place } from '@googlemaps/google-maps-services-js'\nimport { Row, Col, Grid, Drawer, List } from 'antd';\nimport { MapContainer } from '../Map/map';\nimport { SearchPanel } from '../SearchPanel/searchPanel';\nimport { DEFAULT_LAT_LNG, genRegex, radiusToZoom, marks, PartialUserMapIcon, DEFAULT_OPTIONS } from '../lib/utils/constants';\nimport { MarkerOptions } from '../Map/map.interface';\nimport { SearchResults } from '../SearchPanel/SearchResults/searchResults';\nimport { PastSearch } from '../lib/utils/interface';\nimport { RightCircleOutlined } from '@ant-design/icons';\nimport { makeRequest, HTTPMethod } from '../lib/utils/request';\n\nconst { useBreakpoint } = Grid;\n\nexport const Home: FunctionComponent<{\n    isLoggedIn: boolean\n    pastSearches: PastSearch[] | undefined\n    pastSearchVisible: boolean\n    setPastSearchVisible: Dispatch<SetStateAction<boolean>>\n    setPastSearches: Dispatch<SetStateAction<PastSearch[]>>\n}> = (props) => {\n\n    // initialize states\n    const [ pastClicked, setPastClicked ] = useState<boolean>(false);\n    const [ allHospitalsData, setAllHospitalsData ] = useState<Place[]>([]);\n    const [searchRadius, setSearchRadius] = useState(10);\n    const [query, setQuery] = useState('');\n    const [value, setValue] = useState('');\n    const [ hospitalsData, setHospitalsData ] = useState(allHospitalsData);\n    const [ dataIsLoading, setDataIsLoading ] = useState(true);\n    const [center, setCenter] = useState(DEFAULT_LAT_LNG);\n    const [ currentPage, setCurrentPage ] = useState(1);\n    const [ mapMarkers, setMapMarkers ] = useState<MarkerOptions[]>([])\n    const [ mapZoom, setMapZoom ] = useState(13);\n    const [ drawerIsOpen, setDrawerIsOpen ] = useState(false);\n\n    const [ options, setOptions ] = useState(DEFAULT_OPTIONS);\n    const { xl } = useBreakpoint();\n\n    // Data fetching effect\n    useEffect(() => {\n        \n        if(center.lat !== DEFAULT_LAT_LNG.lat && center.lng !== DEFAULT_LAT_LNG.lng && query !== '')\n        {\n            const options = {\n                path: '/places'+(!props.isLoggedIn || pastClicked ? '/free': ''),\n                method: HTTPMethod.POST,\n                body: {\n                    query: query,\n                    radius: searchRadius * 1000,\n                    latlng: center\n                },\n                auth: true\n            };\n\n            setDataIsLoading(true);\n            makeRequest(options).then(response => {\n                const { data }: { data: Place[] } = response.data;\n                setAllHospitalsData(data);\n\n                let queryFiltered;\n\n                if (query) {\n                    queryFiltered = filterData(data, query)\n                }\n\n                setHospitalsData(queryFiltered ? queryFiltered : data)\n                setDataIsLoading(false);\n\n                const markers = (queryFiltered ? queryFiltered : data).map((item: any) => {\n                    return {\n                        content: item.formatted_address,\n                        title: item.name,\n                        color: 'white',\n                        text: item.id,\n                        location: item.geometry.location\n                    }\n                });\n\n                setMapMarkers([...markers, {\n                    ...PartialUserMapIcon,\n                    location: center\n                }])\n\n                const pastSearches = props.pastSearches?.slice() || [];\n                !pastClicked && pastSearches.push({\n                    keyword: query,\n                    radius: searchRadius * 1000,\n                    timestamp: Date.now()\n                });\n\n                props.setPastSearches(pastSearches);\n            })\n            setPastClicked(false)\n        } else {\n            setDataIsLoading(false);\n        }\n    }, [searchRadius, center, query])\n\n    // get current location\n    useEffect(() => {\n        if('geolocation' in navigator) {\n            navigator.geolocation.getCurrentPosition((position) => {\n                const { latitude, longitude } = position.coords;\n                setCenter({\n                    lat: latitude,\n                    lng: longitude\n                })\n                setMapMarkers([\n                    { \n                        ...PartialUserMapIcon,\n                        location: {\n                            lat: latitude,\n                            lng: longitude\n                        }\n                    }\n                ]);\n            })\n        }\n    }, []);\n\n\n    // Event Handlers\n    const filterData = (data: any, query: string) => {\n        return data.filter(({name}: { name: string}) => {\n            return name.match(genRegex(query))\n        });\n    }\n\n    const filterOptionsData = (data: any, query: string) => {\n        return data.filter(({value}: { value: string}) => {\n            return value.match(genRegex(query))\n        });\n    }\n\n    const handleSearchInputChange = async (value: string) => {\n        setValue(value)\n        setOptions(filterOptionsData(DEFAULT_OPTIONS, value))\n        // setCurrentPage(1);  // reset current page because the data has been filtered\n        // setHospitalsData(filteredHospitalData(allHospitalsData, query))\n        // setDrawerIsOpen(true);\n\n    }\n\n    const handleSearchRadiusChange = (value: number | [number, number]) => {\n        setDataIsLoading(true); // set skeleton to loading\n        setCurrentPage(1); // reset current page because the data has been changed\n        setSearchRadius(Array.isArray(value) ? value[0] : value)\n\n        const realValue: number = typeof value === 'number' ? value : value[0];\n        const zoom = radiusToZoom(realValue);\n        \n        setMapZoom(zoom);\n    }\n\n    const handlePageChange = (page: number, pageSIze: number | undefined) => {\n        setCurrentPage(page)\n    }\n\n    const handleMarkerIconClick = (location: MarkerOptions) => {\n        setMapMarkers([{\n            ...PartialUserMapIcon,\n            location: center\n        }, location])\n\n        if(xl) {\n            setDrawerIsOpen(false);\n        } else {\n            setQuery(location.title)\n            setDrawerIsOpen(true)\n        }\n    }\n\n    const onSearch = (value: string) => {\n        setCurrentPage(1);  // reset current page because the data has been filtered\n    }\n\n    const onSelect = (value: string, option: any) => {\n        setQuery(value);\n        setDrawerIsOpen(true);\n    }\n\n    // render\n\n    const columnSpan = xl ? 12 : 24; // if the screen size is xl split into 2 columns if not take full page\n    return <Row style={{\n        display: 'flex',\n        flexFlow: xl ? 'row' : 'column',\n        height: '100vh',\n        alignItems: 'stretch'\n    }}>\n        {\n            <Drawer\n                title=\"Results\"\n                placement=\"left\"\n                width={xl ? 500 : 300}\n                onClose={() => {\n                    props.setPastSearchVisible(false)\n                }}\n                visible={props.pastSearchVisible}\n            >\n                <List\n                    itemLayout=\"horizontal\"\n                    dataSource={props.pastSearches}\n                    renderItem={item => (\n                    <List.Item\n                        actions={[\n                            <RightCircleOutlined\n                                onClick={() => {\n                                    setPastClicked(true)\n                                    handleSearchInputChange(item.keyword)\n                                    handleSearchRadiusChange(item.radius / 1000)\n                                    onSelect(item.keyword, {})\n                                    props.setPastSearchVisible(false);\n                                }}\n                                style={{\n                                    fontSize: '30px'\n                                }}\n                            ></RightCircleOutlined>\n                        ]}\n                    >\n                        <List.Item.Meta\n                            title={\n                                <div>\n                                    <h3\n                                        style={{\n                                            fontWeight: \"bolder\"\n                                        }}\n                                    >{item.keyword}</h3> \n                                    within {item.radius / 1000}KM\n                                </div>\n                            }\n                            description={new Date(item.timestamp).toLocaleString()}\n                        />\n                    </List.Item>\n                    )}\n                />\n            </Drawer>\n        }\n        <Col span={columnSpan} style={{\n            padding: '24px 24px 0 24px',\n            backgroundColor: '#ffffff',\n            flex: (xl) ? '0 0 100%' :'none'\n        }}>\n            <SearchPanel\n                cropped={!!xl}\n                handleMarkerIconClick={handleMarkerIconClick}\n                handleSearchInputChange={handleSearchInputChange}\n                handleSearchRadiusChange={handleSearchRadiusChange}\n                handlePageChange={handlePageChange}\n                marks={marks}\n                hospitalsData={hospitalsData}\n                searchRadius={searchRadius}\n                query={value}\n                dataIsLoading={dataIsLoading}\n                currentPage={currentPage}\n                center={center}\n                onSearch={onSearch}\n                onSelect={onSelect}\n                options={options}\n            />\n        </Col>\n        <Col span={columnSpan} style={{\n            backgroundColor: '#eeeeee',\n            display: 'flex',\n            flex: 1,\n            overflow: 'auto'\n        }}>\n            <MapContainer\n                handleMarkerIconClick={handleMarkerIconClick}\n                center={center}\n                setCenter={setCenter}\n                zoom={mapZoom}\n                markerLocations={mapMarkers}\n            ></MapContainer>\n        </Col>\n        { !xl &&\n            <Drawer\n                title=\"Results\"\n                placement=\"bottom\"\n                onClose={() => {\n                    setDrawerIsOpen(false)\n                }}\n                visible={drawerIsOpen}\n                mask={false}\n            >\n                <SearchResults\n                    pagination={false}\n                    handleMarkerIconClick={handleMarkerIconClick}\n                    handlePageChange={handlePageChange}\n                    center={center}\n                    hospitalsData={hospitalsData}\n                    currentPage={currentPage}\n                    pageSize={3}\n                ></SearchResults>\n            </Drawer>\n        }\n    </Row>\n}","import React, { FC, useState } from 'react';\nimport { Form, Input, Checkbox, Button, Space, Alert } from \"antd\"\nimport { LockOutlined } from '@ant-design/icons';\nimport { AiOutlineMail } from 'react-icons/ai';\nimport { IAccountFormProps } from './account-form.interface';\nimport { makeRequest, HTTPMethod } from '../lib/utils/request'\nimport { useHistory } from 'react-router-dom';\n\nexport const LoginForm: FC<IAccountFormProps> = (props) => {\n\n    const { setIsLoggedIn } = props;\n\n    const history = useHistory();\n    const [ visible, setVisible ] = useState(false);\n\n    const onFinish = async (values: any) => {\n        const response:any = await makeRequest({\n            path: '/auth/login',\n            method: HTTPMethod.POST,\n            body: {\n                username: values.username,\n                password: values.password\n            },\n            auth: false\n        });\n\n        if (response.success) {\n            localStorage.setItem('token', response.data.token)\n            history.push('/');\n            setIsLoggedIn(true);\n        } else {\n            setVisible(true);\n            setTimeout(() => {\n                setVisible(false);\n            }, 2000)\n        }\n    }\n\n    return (\n        <>\n        <Form\n            name=\"normal_login\"\n            className=\"login-form\"\n            initialValues={{ remember: true }}\n            onFinish={onFinish}\n        >\n            <Space direction='vertical'>\n            <Form.Item\n                name=\"username\"\n                rules={[{ required: true, message: 'Please input your Username!' }]}\n            >\n                <Input size='large' prefix={<AiOutlineMail/>} placeholder=\"Email\" />\n            </Form.Item>\n            <Form.Item\n                name=\"password\"\n                rules={[{ required: true, message: 'Please input your Password!' }]}\n            >\n                <Input\n                size='large'\n                prefix={<LockOutlined className=\"site-form-item-icon\" />}\n                type=\"password\"\n                placeholder=\"Password\"\n                />\n            </Form.Item>\n            <Form.Item name=\"remember\" valuePropName=\"checked\" noStyle>\n                <Checkbox>Remember me</Checkbox>\n            </Form.Item>\n            <Form.Item>\n                <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                Log in\n                </Button>\n            </Form.Item>\n            </Space>\n        </Form>\n        {visible && <Alert message='Invalid login details' type='error' showIcon></Alert>}\n        </>\n    )\n}","import React, { FC, useState } from 'react';\nimport { Form, Input, Button, Space, Alert } from \"antd\"\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport { AiOutlineMail } from 'react-icons/ai';\nimport { useHistory } from 'react-router-dom';\nimport { IAccountFormProps } from './account-form.interface';\nimport { makeRequest, HTTPMethod } from '../lib/utils/request';\n\nexport const RegisterForm: FC<IAccountFormProps> = (props) => {\n\n    const history = useHistory();\n    const [ visible, setVisible ] = useState(false);\n\n    const onFinish = async (values: any) => {\n        const response:any = await makeRequest({\n            path: '/user/register',\n            method: HTTPMethod.POST,\n            body: {\n                name: values.name,\n                email: values.username,\n                password: values.password\n            },\n            auth: false\n        });\n\n        if (response.success) {\n            history.push('/account');\n        } else {\n            setVisible(true);\n            setTimeout(() => {\n                setVisible(false);\n            }, 2000)\n        }\n    }\n\n    return (\n        <>\n        <Form\n            name=\"normal_login\"\n            initialValues={{ remember: true }}\n            onFinish={onFinish}\n        >\n            <Space direction='vertical'>\n            <Form.Item\n                name=\"name\"\n                rules={[{ required: true, message: 'Please input your full name!' }]}\n            >\n                <Input size='large' prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Full Name\" />\n            </Form.Item>\n            <Form.Item\n                name=\"username\"\n                rules={[{ required: true, message: 'Please input your Username!' }]}\n            >\n                <Input size='large' prefix={<AiOutlineMail/>} placeholder=\"Email\" />\n            </Form.Item>\n            <Form.Item\n                name=\"password\"\n                rules={[{ required: true, message: 'Please input your Password!' }]}\n            >\n                <Input\n                size='large'\n                prefix={<LockOutlined className=\"site-form-item-icon\" />}\n                type=\"password\"\n                placeholder=\"Password\"\n                />\n            </Form.Item>\n            <Form.Item>\n                <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                Register\n                </Button>\n            </Form.Item>\n            </Space>\n        </Form>\n        {visible && <Alert message='Registration failed. Try again' type='error' showIcon></Alert>}\n        </>\n    )\n}","import React, { FC, useState } from \"react\";\nimport { Menu, Row, Col, Space } from \"antd\";\nimport { LoginForm } from \"./LoginForm\";\nimport { RegisterForm } from \"./RegisterForm\";\nimport { Switch, Route, useRouteMatch, Link } from \"react-router-dom\";\nimport { IAccountsProps } from \"./accounts.interface\";\n\nexport const Accounts: FC<IAccountsProps> = (props) => {\n\n    const { setIsLoggedIn } = props;\n\n    const { path, url } = useRouteMatch();\n    const [ selected, setSelected ] = useState<string>('signIn')\n\n    return (\n        <Row>\n            <Col span={12} offset={6}>\n                <Space direction='vertical'>\n                <Menu\n                    style={{\n                        marginBottom: '30px'\n                    }}\n                    onClick={(item) => {\n                        setSelected(item.key)\n                    }}\n                    mode=\"horizontal\"\n                    selectedKeys={[selected]}\n                >\n                    \n                    <Menu.Item\n                        key='signUp'\n                    >\n                        <Link to={`${url}/register`} />\n                        Sign Up\n                    </Menu.Item>\n                    <Menu.Item\n                        key='signIn'\n                    >\n                        <Link to={path} />\n                        Sign In\n                    </Menu.Item>\n                </Menu>\n\n                <Switch>\n                    <Route exact path={path}>\n                        <LoginForm\n                            setIsLoggedIn={setIsLoggedIn}\n                            setSelected={setSelected}\n                        />\n                    </Route>\n                    <Route path={`${url}/register`}>\n                        <RegisterForm\n                            setIsLoggedIn={setIsLoggedIn}\n                            setSelected={setSelected}\n                        />\n                    </Route>\n                </Switch>\n                </Space>\n            </Col>\n        </Row>\n    )\n}","import React, { FC, useEffect, useState, Dispatch, SetStateAction } from 'react';\nimport { HashRouter, Link, Switch, Route } from 'react-router-dom';\nimport { PageHeader, Button } from 'antd';\nimport { LoginOutlined, SearchOutlined, LogoutOutlined } from '@ant-design/icons';\nimport { Home } from './Home/Home';\nimport { PastSearch } from './lib/utils/interface';\nimport { backendUrl } from './lib/utils/constants';\nimport { Accounts } from './Accounts/Accounts';\n\n\nexport const App: FC = () => {\n    const [isLoggedIn, setIsLoggedIn ] = useState(false);\n    const [ pastSearches, setPastSearches ]: [\n        PastSearch[],\n        Dispatch<SetStateAction<PastSearch[]>>\n    ] = useState<PastSearch[]>([]);\n    \n    const [ pastSearchVisible, setPastSearchVisible ] = useState(false);\n\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n\n        fetch(backendUrl+(token ? '/profile' : '/search/all'), {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            }\n        }).then((response) => {\n            if(response.ok && !!token) {\n                setIsLoggedIn(true);\n            }\n            return response.json()\n        }).then((data) => {\n            setPastSearches(data.pastSearches);\n        }).catch(e => {\n            console.log(e)\n        });\n    }, [isLoggedIn])\n    return (\n        <HashRouter basename='/'>\n            <PageHeader\n            title=\"nearst\"\n            extra={[\n                    <Button\n                        key='past-searches'\n                        type='primary'\n                        size=\"large\"\n                        icon={<SearchOutlined/>}\n                        onClick={() => {\n                            setPastSearchVisible(true)\n                        }}\n                    >\n                        Past Searches\n                    </Button>,\n                    <Link\n                        key='login'\n                        to={isLoggedIn ? '/' : \"/account\" }\n                    >\n                        <Button\n                            key='logout'\n                            type='link'\n                            size=\"large\"\n                            shape='circle'\n                            icon={isLoggedIn ? <LogoutOutlined/> : <LoginOutlined/>}\n                            onClick={() => {\n                                if(isLoggedIn) {\n                                    localStorage.removeItem('token');\n                                    setIsLoggedIn(false)\n                                }  else {\n                                    \n                                }\n                                \n                            }}\n                        >\n                            {isLoggedIn ? 'Logout' : 'Login'}\n                        </Button>\n                    </Link>\n            ]}\n            ></PageHeader>\n            <Switch>\n                <Route exact path='/'>\n                    <Home\n                        setPastSearches={setPastSearches}\n                        setPastSearchVisible={setPastSearchVisible}\n                        pastSearchVisible={pastSearchVisible}\n                        isLoggedIn={isLoggedIn}\n                        pastSearches={pastSearches}\n                    />\n                </Route>\n                <Route path='/account'>\n                    <Accounts\n                        setIsLoggedIn={setIsLoggedIn}\n                    />\n                </Route>\n            </Switch>\n        </HashRouter>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport * as serviceWorker from './serviceWorker';\nimport { App } from './App';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}